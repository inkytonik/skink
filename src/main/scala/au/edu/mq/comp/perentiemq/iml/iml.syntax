module au.edu.mq.comp.perentiemq.iml.IML;

header {
    import au.edu.mq.comp.perentiemq.iml.IMLSyntax.*;
}

Program =
  Spacing FunctionDefinition+ EOF.

FunctionDefinition =
  "def" Identifier '(' ArgumentDefinition ** "," ')' ":"
    '(' ArgumentDefinition ++ "," ')' Block \n \n                       {FunDef}.

ArgumentDefinition =
    Identifier ":" Type                                                 {TypedArg}
  | Identifier                                                          {Arg}.

Type =
    'Array'                                                             {ArrayType}
  | 'Bool'                                                              {BoolType}
  | 'Int'                                                               {IntType}.

Statement {paren} =
  NonBlockStatement.

NonBlockStatement : Statement {line, nested, paren} =
    "assert" '(' Predicate ')' ';'                                      {Assert}
  | Assignable ++ "," sp "=" Expression ++ "," ';'                      {Assign}
  | "assume" '(' Predicate ')' ';'                                      {Assume}
  | Assignable ++ "," sp "=" Identifier '(' Expression ** "," ')' ';'   {Call}
  | "goto" Identifier ';'                                               {Goto}
  | "if" '(' Predicate ')' BlockOrStatement \n 'else' BlockOrStatement  {If}
  | Identifier ':' NonBlockStatement                                    {Label, 1, right}
  | "print" '(' Expression ')' ';'                                      {Print}
  | 'skip' ';'                                                          {Skip}
  | "while" '(' Predicate ')' BlockOrStatement                          {While}.

BlockOrStatement : Statement =
    Statement
  | Block.

Block : Statement =
  sp '{' Statement+ \n '}'.

Predicate {paren} =
    Predicate sp "||" Predicate                                         {Or, left, 3}
  | Predicate sp "&&" Predicate                                         {And, left, 2}
  | Expression sp "==" Expression                                       {EQ}
  | Expression sp "!=" Expression                                       {NEQ}
  | Expression sp "<=" Expression                                       {LE}
  | Expression sp "<" Expression                                        {LT}
  | Expression sp ">=" Expression                                       {GE}
  | Expression sp ">" Expression                                        {GT}
  | '!' Predicate                                                       {Not, right, 1}
  | 'false'                                                             {False}
  | 'true'                                                              {True}
  | Assignable                                                          {PLoad}
  | '(' Predicate ')'.

Expression {paren} =
    Expression sp "+" Expression                                        {Add, left, 3}
  | Expression sp "-" Expression                                        {Sub, left, 3}
  | Expression sp "*" Expression                                        {Mul, left, 2}
  | Expression sp "/" Expression                                        {Div, left, 2}
  | Expression sp "%" Expression                                        {Mod, left, 2}
  | '-' Expression                                                      {Neg, right, 1}
  | IntegerLiteral                                                      {IntLit, 1: scala.math.BigInt.apply : BigInt}
  | Assignable                                                          {ELoad}
  | '(' Expression ')'.

Assignable {paren} =
    Assignable '[' Expression ']'                                       {Index, left, 1}
  | Identifier                                                          {Var}.

IntegerLiteral : String =
  Integer Spacing.

Integer : String =
  [0-9]+.
