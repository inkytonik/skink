#! /bin/bash
# Run BenchExec on SV-COMP benchmark, validate witnesses and
# summarise results as HTML table
# Usage: ./bench args
# Args are passed to benchexec, if empty run all tasks etc.
# E.g., use "-t ReachSafety-Loops" to just run Loops task.

BENCHMARK_SPEC=/skink/skink.xml
ORIG_VIOLATION_WITNESS_SPEC=/sv-comp/benchmark-defs/cpa-seq-validate-violation-witnesses.xml
ORIG_CORRECTNESS_WITNESS_SPEC=/sv-comp/benchmark-defs/cpa-seq-validate-correctness-witnesses.xml
VIOLATION_WITNESS_SPEC=/sv-comp/benchmark-defs/skinktest-violation-witnesses.xml
CORRECTNESS_WITNESS_SPEC=/sv-comp/benchmark-defs/skinktest-correctness-witnesses.xml

VERIFIER_OUTPUT_PATH=/skink/results-verified
VIOLATION_OUTPUT_PATH=/skink/results-violation
CORRECTNESS_OUTPUT_PATH=/skink/results-correctness
PATH_TO_CPACHECKER=/usr/local/bin/CPAchecker

BENCHEXEC=/usr/local/bin/benchexec
BENCHEXEC_ARGS="--no-container"
MERGEBENCHMARKSETS=/usr/src/benchexec/contrib/mergeBenchmarkSets.py
TABLEGENERATOR=/usr/local/bin/table-generator
TABLEGENERATOR_ARGS='-q'

# Massage the witness validation specifications:
# - add a section for Test.set 
# - fix pathnames so they work in our image
function addspec() {
  j=`basename $1 .xml`
  sed -e '$d' $1 | cat - $3 | \
    sed -e 's|../sv-benchmarks|/sv-benchmarks|' \
      -e 's|../../results-verified|../results-verified|'\
      -e 's|../results-verified/LOGDIR/sv-comp18.${inputfile_name}.files/witness.graphml|${inputfile_path}/${inputfile_name}.graphml|' \
    >$2
  echo '</benchmark>' >>$2
}
addspec $ORIG_VIOLATION_WITNESS_SPEC $VIOLATION_WITNESS_SPEC /skink/Test-violation.xml
addspec $ORIG_CORRECTNESS_WITNESS_SPEC $CORRECTNESS_WITNESS_SPEC /skink/Test-correctness.xml

rm -rf $VERIFIER_OUTPUT_PATH $VIOLATION_OUTPUT_PATH $CORRECTNESS_OUTPUT_PATH
mkdir $VERIFIER_OUTPUT_PATH $VIOLATION_OUTPUT_PATH $CORRECTNESS_OUTPUT_PATH

# Run verifier on benchmarks
$BENCHEXEC $BENCHEXEC_ARGS -o $VERIFIER_OUTPUT_PATH $BENCHMARK_SPEC $*
result_xml=`echo $VERIFIER_OUTPUT_PATH/*.xml.bz2`

# Run CPAchecker to validate the violation witnesses
cd $PATH_TO_CPACHECKER
$BENCHEXEC $BENCHEXEC_ARGS -o $VIOLATION_OUTPUT_PATH $VIOLATION_WITNESS_SPEC $*
violation_xml=`echo $VIOLATION_OUTPUT_PATH/*.xml.bz2`

# Run CPAchecker to validate the correctness witnesses
cd $PATH_TO_CPACHECKER
$BENCHEXEC $BENCHEXEC_ARGS -o $CORRECTNESS_OUTPUT_PATH $CORRECTNESS_WITNESS_SPEC $*
correctness_xml=`echo $CORRECTNESS_OUTPUT_PATH/*.xml.bz2`

# Merge verifier results and witness validation results
python3 $MERGEBENCHMARKSETS $result_xml $violation_xml $correctness_xml

# Format merged results
merged=`echo $VERIFIER_OUTPUT_PATH/*.merged.xml.bz2`
$TABLEGENERATOR $TABLEGENERATOR_ARGS $merged
merged_html=`echo $VERIFIER_OUTPUT_PATH/*.merged.html`
echo ''
echo $merged_html
